// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GcpIamUserAccountOauthSession gcp iam user account oauth session
//
// swagger:model GcpIamUserAccountOauthSession
type GcpIamUserAccountOauthSession struct {

	// account Id
	AccountID string `json:"AccountId,omitempty"`

	// credentials label
	CredentialsLabel string `json:"CredentialsLabel,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// last stop time
	LastStopTime string `json:"LastStopTime,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// project name
	ProjectName string `json:"ProjectName,omitempty"`

	// start time
	StartTime string `json:"StartTime,omitempty"`

	// status
	Status GcpSessionStatus `json:"Status,omitempty"`
}

// Validate validates this gcp iam user account oauth session
func (m *GcpIamUserAccountOauthSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpIamUserAccountOauthSession) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this gcp iam user account oauth session based on the context it is used
func (m *GcpIamUserAccountOauthSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpIamUserAccountOauthSession) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpIamUserAccountOauthSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpIamUserAccountOauthSession) UnmarshalBinary(b []byte) error {
	var res GcpIamUserAccountOauthSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpCreateIamUserAccountOauthSessionRequest GcpCreateIamUserAccountOauthSessionRequest GcpCreateIamUserAccountOauthSessionRequest gcp create iam user account oauth session request
//
// swagger:model GcpCreateIamUserAccountOauthSessionRequest
type GcpCreateIamUserAccountOauthSessionRequest struct {

	// the account identifier of the gcp account
	// Required: true
	AccountID *string `json:"accountId"`

	// the name which will be displayed
	// Required: true
	Name *string `json:"name"`

	// the OAuth code to obtain credentials
	// Required: true
	OauthCode *string `json:"oauthCode"`

	// the name of the gcp project
	// Required: true
	ProjectName *string `json:"projectName"`
}

// Validate validates this gcp create iam user account oauth session request
func (m *GcpCreateIamUserAccountOauthSessionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpCreateIamUserAccountOauthSessionRequest) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *GcpCreateIamUserAccountOauthSessionRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GcpCreateIamUserAccountOauthSessionRequest) validateOauthCode(formats strfmt.Registry) error {

	if err := validate.Required("oauthCode", "body", m.OauthCode); err != nil {
		return err
	}

	return nil
}

func (m *GcpCreateIamUserAccountOauthSessionRequest) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gcp create iam user account oauth session request based on context it is used
func (m *GcpCreateIamUserAccountOauthSessionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GcpCreateIamUserAccountOauthSessionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpCreateIamUserAccountOauthSessionRequest) UnmarshalBinary(b []byte) error {
	var res GcpCreateIamUserAccountOauthSessionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

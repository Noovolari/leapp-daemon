// Code generated by go-swagger; DO NOT EDIT.

package aws_iam_user_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new aws iam user session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for aws iam user session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAwsIamUserSession(params *CreateAwsIamUserSessionParams, opts ...ClientOption) (*CreateAwsIamUserSessionOK, error)

	DeleteAwsIamUserSession(params *DeleteAwsIamUserSessionParams, opts ...ClientOption) (*DeleteAwsIamUserSessionOK, error)

	EditAwsIamUserSession(params *EditAwsIamUserSessionParams, opts ...ClientOption) (*EditAwsIamUserSessionOK, error)

	GetAwsIamUserSession(params *GetAwsIamUserSessionParams, opts ...ClientOption) (*GetAwsIamUserSessionOK, error)

	StartAwsIamUserSession(params *StartAwsIamUserSessionParams, opts ...ClientOption) (*StartAwsIamUserSessionOK, error)

	StopAwsIamUserSession(params *StopAwsIamUserSessionParams, opts ...ClientOption) (*StopAwsIamUserSessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAwsIamUserSession Create a new AWS IAM UserName Session
*/
func (a *Client) CreateAwsIamUserSession(params *CreateAwsIamUserSessionParams, opts ...ClientOption) (*CreateAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAwsIamUserSession",
		Method:             "POST",
		PathPattern:        "/aws/iam-user-sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAwsIamUserSession Delete an AWS IAM UserName Session
*/
func (a *Client) DeleteAwsIamUserSession(params *DeleteAwsIamUserSessionParams, opts ...ClientOption) (*DeleteAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAwsIamUserSession",
		Method:             "DELETE",
		PathPattern:        "/aws/iam-user-sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditAwsIamUserSession Edit a AWS IAM UserName Session
*/
func (a *Client) EditAwsIamUserSession(params *EditAwsIamUserSessionParams, opts ...ClientOption) (*EditAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editAwsIamUserSession",
		Method:             "PUT",
		PathPattern:        "/aws/iam-user-sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsIamUserSession Get a AWS IAM UserName Session
*/
func (a *Client) GetAwsIamUserSession(params *GetAwsIamUserSessionParams, opts ...ClientOption) (*GetAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAwsIamUserSession",
		Method:             "GET",
		PathPattern:        "/aws/iam-user-sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartAwsIamUserSession Start an AWS IAM UserName Session
*/
func (a *Client) StartAwsIamUserSession(params *StartAwsIamUserSessionParams, opts ...ClientOption) (*StartAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startAwsIamUserSession",
		Method:             "POST",
		PathPattern:        "/aws/iam-user-sessions/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopAwsIamUserSession Stop an AWS IAM UserName Session
*/
func (a *Client) StopAwsIamUserSession(params *StopAwsIamUserSessionParams, opts ...ClientOption) (*StopAwsIamUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAwsIamUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopAwsIamUserSession",
		Method:             "POST",
		PathPattern:        "/aws/iam-user-sessions/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopAwsIamUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopAwsIamUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopAwsIamUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

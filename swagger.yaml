definitions:
  Configuration:
    properties:
      FederatedAwsSessions:
        items:
          $ref: '#/definitions/FederatedAwsSession'
        type: array
      NamedProfiles:
        items:
          $ref: '#/definitions/NamedProfile'
        type: array
      PlainAwsSessions:
        items:
          $ref: '#/definitions/PlainAwsSession'
        type: array
      ProxyConfiguration:
        $ref: '#/definitions/ProxyConfiguration'
      TrustedAwsSessions:
        items:
          $ref: '#/definitions/TrustedAwsSession'
        type: array
    type: object
    x-go-package: leapp_daemon/domain/configuration
  CreatePlainAwsSessionRequestDto:
    properties:
      accountNumber:
        description: the account number of the aws account related to the role
        type: string
        x-go-name: AccountNumber
      awsAccessKeyId:
        type: string
        x-go-name: AwsAccessKeyId
      awsSecretAccessKey:
        type: string
        x-go-name: AwsSecretAccessKey
      mfaDevice:
        type: string
        x-go-name: MfaDevice
      name:
        description: the name which will be displayed
        type: string
        x-go-name: Name
      profileName:
        type: string
        x-go-name: ProfileName
      region:
        description: the region on which the session will be initialized
        type: string
        x-go-name: Region
      user:
        type: string
        x-go-name: User
    required:
    - name
    - accountNumber
    - region
    type: object
    x-go-package: leapp_daemon/interface/http/controller/dto/request_dto/plain_aws_session_dto
  CreateTrustedAwsSessionRequestDto:
    properties:
      accountName:
        description: the name which will be displayed
        type: string
        x-go-name: AccountName
      accountNumber:
        description: the account number of the aws account related to the role
        type: string
        x-go-name: AccountNumber
      parentId:
        description: |-
          the parent session id, can be an aws plain or federated session
          it's generated with an uuid v4
        type: string
        x-go-name: ParentId
      region:
        description: the region on which the session will be initialized
        type: string
        x-go-name: Region
      roleName:
        description: the role name
        type: string
        x-go-name: RoleName
    required:
    - parentId
    - accountName
    - accountNumber
    - roleName
    type: object
    x-go-package: leapp_daemon/interface/http/controller/dto/request_dto/trusted_aws_session_dto
  EditTrustedAwsSessionRequestDto:
    properties:
      accountName:
        description: the name which will be displayed
        type: string
        x-go-name: AccountName
      accountNumber:
        description: the account number of the aws account related to the role
        type: string
        x-go-name: AccountNumber
      parentId:
        description: |-
          the parent session id, can be an aws plain or federated session
          it's generated with an uuid v4
        type: string
        x-go-name: ParentId
      region:
        description: the region on which the session will be initialized
        type: string
        x-go-name: Region
      roleName:
        description: the role name
        type: string
        x-go-name: RoleName
    type: object
    x-go-package: leapp_daemon/interface/http/controller/dto/request_dto/trusted_aws_session_dto
  FederatedAwsAccount:
    properties:
      AccountNumber:
        type: string
      IdpArn:
        type: string
      Name:
        type: string
      Region:
        type: string
      Role:
        $ref: '#/definitions/FederatedAwsRole'
      SsoUrl:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/session
  FederatedAwsRole:
    properties:
      Arn:
        type: string
      Name:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/session
  FederatedAwsSession:
    properties:
      Account:
        $ref: '#/definitions/FederatedAwsAccount'
      Id:
        type: string
      Profile:
        type: string
      StartTime:
        type: string
      Status:
        $ref: '#/definitions/Status'
    type: object
    x-go-package: leapp_daemon/domain/session
  MessageOnlyResponseDto:
    properties:
      Message:
        type: string
    type: object
    x-go-package: leapp_daemon/interface/http/controller/dto/response_dto
  NamedProfile:
    properties:
      Id:
        type: string
      Name:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/named_profile
  PlainAwsAccount:
    properties:
      AccountNumber:
        type: string
      AwsAccessKeyId:
        type: string
      AwsSecretAccessKey:
        type: string
      MfaDevice:
        type: string
      Name:
        type: string
      Region:
        type: string
      User:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/session
  PlainAwsSession:
    properties:
      Account:
        $ref: '#/definitions/PlainAwsAccount'
      Id:
        type: string
      Profile:
        type: string
      StartTime:
        type: string
      Status:
        $ref: '#/definitions/Status'
    type: object
    x-go-package: leapp_daemon/domain/session
  ProxyConfiguration:
    properties:
      Password:
        type: string
      ProxyPort:
        format: uint64
        type: integer
      ProxyProtocol:
        type: string
      ProxyUrl:
        type: string
      Username:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/configuration
  Status:
    format: int64
    type: integer
    x-go-package: leapp_daemon/domain/session
  TrustedAwsAccount:
    properties:
      AccountNumber:
        type: string
      Name:
        type: string
      Region:
        type: string
      Role:
        $ref: '#/definitions/TrustedAwsRole'
    type: object
    x-go-package: leapp_daemon/domain/session
  TrustedAwsRole:
    properties:
      Arn:
        type: string
      Name:
        type: string
    type: object
    x-go-package: leapp_daemon/domain/session
  TrustedAwsSession:
    properties:
      Account:
        $ref: '#/definitions/TrustedAwsAccount'
      Id:
        type: string
      ParentId:
        type: string
      StartTime:
        type: string
      Status:
        $ref: '#/definitions/Status'
    type: object
    x-go-package: leapp_daemon/domain/session
  getConfigurationResponse:
    properties:
      Data:
        $ref: '#/definitions/Configuration'
      Message:
        type: string
    type: object
    x-go-package: leapp_daemon/interface/http/controller
  getPlainAwsSessionResponse:
    properties:
      Data:
        $ref: '#/definitions/PlainAwsSession'
      Message:
        type: string
    type: object
    x-go-package: leapp_daemon/interface/http/controller
  getTrustedAwsSessionResponse:
    properties:
      Data:
        $ref: '#/definitions/TrustedAwsSession'
      Message:
        type: string
    type: object
    x-go-package: leapp_daemon/interface/http/controller
paths:
  /configuration:
    get:
      description: Create a new configuration
      operationId: getConfiguration
      responses:
        "200":
          $ref: '#/responses/getConfigurationResponse'
      tags:
      - configuration
    post:
      description: Create a new configuration
      operationId: createConfiguration
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - configuration
  /session/plain:
    post:
      description: Create a new plain aws session
      operationId: createPlainAwsSession
      parameters:
      - description: This text will appear as description of your request body.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/CreatePlainAwsSessionRequestDto'
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-plain-aws
  /session/plain/{id}:
    delete:
      description: Delete a Plain AWS Session
      operationId: deletePlainAwsSession
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-plain-aws
    get:
      description: Get a Plain AWS Session
      operationId: getPlainAwsSession
      responses:
        "200":
          $ref: '#/responses/getPlainAwsSessionResponse'
      tags:
      - session-plain-aws
    put:
      description: Edit a Plain AWS Session
      operationId: editPlainAwsSession
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-plain-aws
  /session/trusted:
    post:
      description: Create a new trusted aws session
      operationId: createTrustedAwsSession
      parameters:
      - description: This text will appear as description of your request body.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/CreateTrustedAwsSessionRequestDto'
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-trusted-aws
  /session/trusted/{id}:
    delete:
      description: Delete a Trusted AWS Session
      operationId: deleteTrustedAwsSession
      parameters:
      - description: the id of the trusted aws session
        in: path
        name: Id
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-trusted-aws
    get:
      description: Get a Trusted AWS Session
      operationId: getTrustedAwsSession
      parameters:
      - description: the id of the trusted aws session
        in: path
        name: Id
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/getTrustedAwsSessionResponse'
      tags:
      - session-trusted-aws
    put:
      description: Edit a Trusted AWS Session
      operationId: editTrustedAwsSession
      parameters:
      - description: This text will appear as description of your request body.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/EditTrustedAwsSessionRequestDto'
      - description: the id of the trusted aws session
        in: path
        name: Id
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/messageResponse'
      tags:
      - session-trusted-aws
responses:
  getConfigurationResponse:
    description: ""
    schema:
      $ref: '#/definitions/getConfigurationResponse'
  getPlainAwsSessionResponse:
    description: ""
    schema:
      $ref: '#/definitions/getPlainAwsSessionResponse'
  getTrustedAwsSessionResponse:
    description: ""
    schema:
      $ref: '#/definitions/getTrustedAwsSessionResponse'
  messageResponse:
    description: ""
    schema:
      $ref: '#/definitions/MessageOnlyResponseDto'
swagger: "2.0"
